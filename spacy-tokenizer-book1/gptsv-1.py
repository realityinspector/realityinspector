import numpy as np
from jina import DocumentArray, Document

# Step 1: load the embeddings generated by the preprocessing script
data = np.load("book_embeddings.npz")
embeddings = data["embeddings"]

# Step 2: create a DocumentArray to store the documents
docs = DocumentArray()

# Step 3: create Document objects and add them to the DocumentArray
for i, emb in enumerate(embeddings):
    doc = Document()
    doc.id = str(i) # set the document ID
    doc.embedding = np.array(emb, dtype=np.float32) # set the document embedding
    docs.append(doc)

# Step 4: create the GPTSimpleVectorIndex and add the documents to it
from jina import Executor, requests

class GPTSimpleVectorIndex(Executor):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self._docs = DocumentArray()

    @requests(on="/index")
    def index(self, docs: DocumentArray, **kwargs):
        self._docs.extend(docs)

    @requests(on="/search")
    def search(self, docs: DocumentArray, parameters: dict, **kwargs):
        for doc in docs:
            # Perform nearest neighbor search using the dot product
            scores = np.dot(doc.embedding, self._docs.get_attributes("embedding").value.T)
            # Rank the results by descending score
            sorted_indices = np.argsort(scores)[::-1]
            # Set the matches for the query Document
            matches = [Document(id=str(i), scores={"dot_product": scores[0, i]}) for i in sorted_indices]
            doc.matches = matches[:parameters["top_k"]]

indexer = GPTSimpleVectorIndex()
indexer.index(docs)
